#include <iostream>
#include <vector>
#include <climits>
using namespace std;

int MatrixChainRecursive(const vector<int>& p, int i, int j) {
    if (i == j)
        return 0;

    int minCost = INT_MAX;

    for (int k = i; k < j; k++) {
        int cost = MatrixChainRecursive(p, i, k)
                 + MatrixChainRecursive(p, k + 1, j)
                 + p[i - 1] * p[k] * p[j];
        if (cost < minCost)
            minCost = cost;
    }

    return minCost;
}

int MatrixChainDP(const vector<int>& p) {
    int n = p.size();
    vector<vector<int>> dp(n, vector<int>(n, 0));

    for (int L = 2; L < n; ++L) {
        for (int i = 1; i < n - L + 1; ++i) {
            int j = i + L - 1;
            dp[i][j] = INT_MAX;
            for (int k = i; k < j; ++k) {
                int cost = dp[i][k] + dp[k + 1][j] + p[i - 1] * p[k] * p[j];
                if (cost < dp[i][j])
                    dp[i][j] = cost;
            }
        }
    }

    return dp[1][n - 1];
}

int main() {
    vector<int> p = {10, 100, 5, 50};

    int n = p.size() - 1;  
    cout << "Liczba macierzy: " << n << "\n";
    cout << "Rozmiary macierzy:\n";
    for (int i = 0; i < n; ++i)
        cout << "  A" << (i + 1) << ": " << p[i] << "x" << p[i + 1] << "\n";

    int costRec = MatrixChainRecursive(p, 1, n);
    int costDP = MatrixChainDP(p);

    cout << "\n--- Wyniki ---\n";
    cout << "Rekurencyjnie: " << costRec << " mnożeń skalarnych\n";
    cout << "Dynamicznie:   " << costDP << " mnożeń skalarnych\n";

    return 0;
}
